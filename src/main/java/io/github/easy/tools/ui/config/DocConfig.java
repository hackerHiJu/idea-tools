package io.github.easy.tools.ui.config;

import cn.hutool.core.util.StrUtil;
import com.intellij.openapi.options.Configurable;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import io.github.easy.tools.entity.doc.TemplateParameter;
import org.jetbrains.annotations.Nullable;

import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.Dimension;
import java.awt.Insets;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * <p> 配置界面类，实现Configurable接口，用于在IDEA设置中展示和管理配置 </p>
 *
 * @author haijun
 * @version x.x.x
 * @email "mailto:zhonghaijun@zhxx.com"
 * @date 2025.09.12 09:24
 * @since x.x.x
 */
public class DocConfig implements Configurable {
    /**
     * 主面板组件
     */
    private JPanel mainPanel;

    /**
     * AI配置面板
     */
    private JPanel aiContent;

    /**
     * 类模板文本框
     */
    private JTextPane classTemplate;

    /**
     * 方法模板文本框
     */
    private JTextPane methodTemplate;

    /**
     * 字段模板文本框
     */
    private JTextPane fieldTemplate;

    /**
     * 内置变量面板
     */
    private JPanel varContent;

    /**
     * 模型基础URL输入框
     */
    private JTextField baseUrl;

    /**
     * 模型名称输入框
     */
    private JTextField modelName;

    /**
     * 模型地址标签
     */
    private JLabel baseUrlTitle;

    /**
     * 模型名称标签
     */
    private JLabel modelNameTitle;

    /**
     * 启用AI复选框
     */
    private JCheckBox enableAi;

    /**
     * 模型类型下拉框
     */
    private JComboBox modelType;

    /**
     * 内置变量描述文本框
     */
    private JTextPane varDesc;

    /**
     * 自定义变量面板
     */
    private JPanel customContent;

    /**
     * 自定义变量文本区域
     */
    private JTextArea customVar;

    /**
     * 类配置面板
     */
    private JPanel classContent;

    /**
     * 方法配置面板
     */
    private JPanel methodContent;

    /**
     * 字段配置面板
     */
    private JPanel fieldContent;

    /**
     * 模型类型标签
     */
    private JLabel modelTypeTItle;
    private JTextField apiKey;
    private JLabel apiKeyTitle;

    /**
     * 配置是否被修改的标志
     */
    private boolean isModified = false;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(11, 1, new Insets(0, 0, 0, 0), -1, -1));
        aiContent = new JPanel();
        aiContent.setLayout(new GridLayoutManager(9, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(aiContent, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        aiContent.setBorder(BorderFactory.createTitledBorder(null, "AI配置", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        baseUrlTitle = new JLabel();
        baseUrlTitle.setText("模型地址");
        aiContent.add(baseUrlTitle, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        baseUrl = new JTextField();
        aiContent.add(baseUrl, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        aiContent.add(spacer1, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        modelName = new JTextField();
        aiContent.add(modelName, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        modelNameTitle = new JLabel();
        modelNameTitle.setText("模型名称");
        aiContent.add(modelNameTitle, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        aiContent.add(spacer2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        enableAi = new JCheckBox();
        enableAi.setText("开启AI");
        aiContent.add(enableAi, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        aiContent.add(spacer3, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        modelTypeTItle = new JLabel();
        modelTypeTItle.setText("模型类型");
        aiContent.add(modelTypeTItle, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modelType = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("openai");
        modelType.setModel(defaultComboBoxModel1);
        aiContent.add(modelType, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        aiContent.add(spacer4, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        apiKeyTitle = new JLabel();
        apiKeyTitle.setText("APIKEY");
        aiContent.add(apiKeyTitle, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        apiKey = new JTextField();
        aiContent.add(apiKey, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        varContent = new JPanel();
        varContent.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(varContent, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        varContent.setBorder(BorderFactory.createTitledBorder(null, "内置变量", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        varDesc = new JTextPane();
        varDesc.setEditable(false);
        varDesc.setEnabled(true);
        varContent.add(varDesc, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        customContent = new JPanel();
        customContent.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(customContent, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        customContent.setBorder(BorderFactory.createTitledBorder(null, "自定义变量（k=v形式使用分号分割）", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        customVar = new JTextArea();
        customContent.add(customVar, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        classContent = new JPanel();
        classContent.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(classContent, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        classContent.setBorder(BorderFactory.createTitledBorder(null, "类模板配置", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        classTemplate = new JTextPane();
        classTemplate.setAutoscrolls(true);
        classContent.add(classTemplate, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        methodContent = new JPanel();
        methodContent.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(methodContent, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        methodContent.setBorder(BorderFactory.createTitledBorder(null, "方法模板配置", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        methodTemplate = new JTextPane();
        methodContent.add(methodTemplate, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        fieldContent = new JPanel();
        fieldContent.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(fieldContent, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        fieldContent.setBorder(BorderFactory.createTitledBorder(null, "字段模板配置", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        fieldTemplate = new JTextPane();
        fieldContent.add(fieldTemplate, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final Spacer spacer5 = new Spacer();
        mainPanel.add(spacer5, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        mainPanel.add(spacer6, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer7 = new Spacer();
        mainPanel.add(spacer7, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer8 = new Spacer();
        mainPanel.add(spacer8, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer9 = new Spacer();
        mainPanel.add(spacer9, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    /**
     * 获取显示名称
     *
     * @return 配置面板的显示名称
     */
    @Override
    public String getDisplayName() {
        return "Easy Tools";
    }

    /**
     * 创建配置组件
     *
     * @return 配置界面的主面板组件
     */
    @Override
    public @Nullable JComponent createComponent() {
        initTemplateText();
        initEventListeners();
        repaint();
        return mainPanel;
    }

    /**
     * 强制重新计算布局和绘制
     */
    private void repaint() {
        SwingUtilities.invokeLater(() -> {
            this.classTemplate.revalidate();
            this.classTemplate.repaint();

            this.methodTemplate.revalidate();
            this.methodTemplate.repaint();

            this.fieldTemplate.revalidate();
            this.fieldTemplate.repaint();
        });
    }

    /**
     * 检查配置是否被修改
     *
     * @return 如果配置被修改返回true，否则返回false
     */
    @Override
    public boolean isModified() {
        DocConfigService config = DocConfigService.getInstance();
        return isModified
                || !Objects.equals(enableAi.isSelected(), config.enableAi)
                || !Objects.equals(baseUrl.getText(), config.baseUrl)
                || !Objects.equals(modelName.getText(), config.modelName)
                || !Objects.equals(modelType.getSelectedItem(), config.modelType)
                || !Objects.equals(classTemplate.getText(), config.classTemplate)
                || !Objects.equals(methodTemplate.getText(), config.methodTemplate)
                || !Objects.equals(fieldTemplate.getText(), config.fieldTemplate)
                || !Objects.equals(customVar.getText(), config.customVar);
    }

    /**
     * 应用配置修改
     * <p>
     * 将界面中的配置保存到配置服务中
     * </p>
     */
    @Override
    public void apply() {
        DocConfigService config = DocConfigService.getInstance();
        config.enableAi = enableAi.isSelected();
        config.baseUrl = baseUrl.getText();
        config.modelName = modelName.getText();
        config.modelType = (String) modelType.getSelectedItem();
        config.classTemplate = classTemplate.getText();
        config.methodTemplate = methodTemplate.getText();
        config.fieldTemplate = fieldTemplate.getText();
        config.customVar = customVar.getText();
        if (StrUtil.isNotBlank(config.customVar)) {
            List<String> split = StrUtil.split(config.customVar, ";");
            config.customParameters = split.stream().map(s -> {
                String[] properties = s.split("=");
                String property = properties[0];
                // 截取key后面的()号里面的数据
                String desc = StrUtil.subBetween(property, "(", ")");
                return new TemplateParameter(properties[0], properties[1], desc);
            }).toList();
        }
        isModified = false;
        repaint();
    }

    /**
     * 重置配置
     * <p>
     * 将界面中的配置重置为配置服务中保存的值
     * </p>
     */
    @Override
    public void reset() {
        DocConfigService config = DocConfigService.getInstance();
        enableAi.setSelected(config.enableAi);
        baseUrl.setText(config.baseUrl);
        modelName.setText(config.modelName);
        modelType.setSelectedItem(config.modelType);
        classTemplate.setText(config.classTemplate);
        methodTemplate.setText(config.methodTemplate);
        fieldTemplate.setText(config.fieldTemplate);
        customVar.setText(config.customVar);
        isModified = false;
        repaint();
    }

    /**
     * 初始化模板文本
     * <p>
     * 从配置服务中获取模板文本并设置到界面组件中
     * </p>
     */
    private void initTemplateText() {
        DocConfigService config = DocConfigService.getInstance();
        modelName.setText(config.modelName);
        modelType.setSelectedItem(config.modelType);
        baseUrl.setText(config.baseUrl);
        enableAi.setSelected(config.enableAi);
        apiKey.setText(config.apiKey);
        classTemplate.setText(config.classTemplate);
        methodTemplate.setText(config.methodTemplate);
        fieldTemplate.setText(config.fieldTemplate);
        List<TemplateParameter> baseParameters = config.getBaseParameters();
        StringJoiner joiner = new StringJoiner("\n");
        for (TemplateParameter parameter : baseParameters) {
            String description = parameter.getDescription();
            String format = String.format("%s(%s)", parameter.getName(), description);
            joiner.add(format + "=" + parameter.getValue());
        }
        varDesc.setText(joiner.toString());
        customVar.setText(config.customVar);
    }

    /**
     * 初始化事件监听器
     * <p>
     * 为界面组件添加事件监听器，用于检测配置修改
     * </p>
     */
    private void initEventListeners() {
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                isModified = true;
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                isModified = true;
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                isModified = true;
            }
        };
        enableAi.addActionListener(e -> isModified = true);
        modelType.addActionListener(e -> isModified = true);
        baseUrl.getDocument().addDocumentListener(documentListener);
        modelName.getDocument().addDocumentListener(documentListener);
        classTemplate.getDocument().addDocumentListener(documentListener);
        methodTemplate.getDocument().addDocumentListener(documentListener);
        fieldTemplate.getDocument().addDocumentListener(documentListener);
    }
}
